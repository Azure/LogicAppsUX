//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

namespace <%= namespace %>
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.Azure.Functions.Extensions.Workflows.WorkflowActionTrigger;
    using Microsoft.Azure.WebJobs;

    /// <summary>
    /// The flow invoked function.
    /// </summary>
    public static class <%= methodName %>
    {
        /// <summary>
        /// Run method.
        /// </summary>
        /// <param name="parameter1">The parameter 1.</param>
        /// <param name="parameter2">The parameter 2.</param>
        /*
        [FunctionName("<%= methodName %>")]
        public static Task<Wrapper> Run([WorkflowActionTrigger] string parameter1, int parameter2)
        {
            var result = new Wrapper
            {
                RandomProperty = new Dictionary<string, object>(){
                    ["parameter1"] = parameter1,
                    ["parameter2"] = parameter2
                }
            };

            return Task.FromResult(result); 
        }

        /// <summary>
        /// The wrapper.
        /// </summary>
        public class Wrapper
        {
            /// <summary>
            /// Gets or sets the .NET Framework worker output.
            /// </summary>
            public Dictionary<string, object> RandomProperty { get; set; }
        }
        */

        [FunctionName("<%= methodName %>")]
        public static Task<Weather> Run([WorkflowActionTrigger] int zipCode, string temperatureScale)
        {
            Random rnd = new Random();
            var currentTemp = temperatureScale == "Celcius" ? rnd.Next(1, 30) : rnd.Next(40, 90);
            var lowTemp = currentTemp - 10;
            var highTemp = currentTemp + 10;


            var weather = new Weather()
            {
                ZipCode = zipCode,
                CurrentWeather = String.Format("The current weather is {0} {1}", currentTemp, temperatureScale),
                DayLow = String.Format("The low for the day is {0} {1}", lowTemp, temperatureScale),
                DayHigh = String.Format("The high for the day is {0} {1}", highTemp, temperatureScale)
            };

            return Task.FromResult(weather);
        }

        public class Weather
        {
            /// <summary>
            /// Gets or sets the .NET Framework worker output.
            /// </summary>
            public int ZipCode { get; set; }
            public string CurrentWeather { get; set; }
            public string DayLow { get; set; }

            public string DayHigh { get; set; }
        }
    }
}
