//------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
//------------------------------------------------------------

namespace <%= namespace %>
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.Azure.Functions.Extensions.Workflows;
    using Microsoft.Azure.WebJobs;
    using Microsoft.Azure.Workflows.RuleEngine
    using Microsoft.Extensions.Logging;

    /// <summary>
    /// Represents the <%= methodName %> flow invoked function.
    /// </summary>
    public class <%= methodName %>
    {
        private readonly ILogger<<%= methodName %>> logger;

        public <%= methodName %>(ILoggerFactory loggerFactory)
        {
            logger = loggerFactory.CreateLogger<<%= methodName %>>();
        }

        /// <summary>
        /// Executes the logic app workflow.
        /// </summary>
        /// <param name="ruleSetName">The rule set name.</param>
        /// <param name="documentType">document type of input xml.</param>
        /// <param name="inputXml">input xml type fact</param>
        /// <param name="purchaseAmount">purchase amount, value used to create .NET fact </param>
        /// <param name="zipCode">zip code value used to create .NET fact .</param>
        [FunctionName("<%= methodName %>")]
        public Task<RuleExectionOutput> RunRules([WorkflowActionTrigger] string ruleSetName, string documentType, string inputXml, int purchaseAmount, string zipCode)
        {
            /* *** Summary of steps below ***
             * Step1: Get the rule set to Execute 
             * Step2: Check if the rule set was retrived successfully
             * Step3: create the rule engine object
             * Step4: Create TypedXmlDocument facts for all xml document facts
             * Step5: Initialize .NET facts
             * Step6: Execute rule engine
             * Step7: Retrieve relevant updates facts and send them back
             */
            try
            {
                // Step1: Get the ruleset based on ruleset name
                IRuleExplorer ruleExplorer = new FileStoreRuleExplorer();
                // This API picks latest version of rule set
                var ruleSet = ruleExplorer.GetRuleSet(ruleSetName);
           
                // Step2 : check ruleset
                if(ruleSet == null)
                {
                    // Log an error in finding the rule set
                    this.logger.LogCritical("Ruleset instance for " +  ruleSetName + " was null");
                    throw new Exception("Ruleset instance for " +  ruleSetName + " was null.");
                }             

                // Step3: Create rule engine instance
                var ruleEngine = new RuleEngine(ruleSet: ruleSet);

                // Step4: Create a typedXml Fact(s) from input xml(s)
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(inputXml);
                TypedXmlDocument typedXmlDocument = new TypedXmlDocument(documentType, doc);

                // Step5: Initialize the .Net facts
                // BreSampleClassLibrary.CurrentPurchase currentPurchase = new BreSampleClassLibrary.CurrentPurchase(purchaseAmount, zipCode);

                // Step6: provide the facts to rule engine and run it
                ruleEngine.Execute(new object[] { typedXmlDocument, currentPurchase });

                // Step7: Send the relevant results(facts) back
                XmlDocument updatedDoc = typedXmlDocument.Document as XmlDocument;
                RuleExectionOutput ruleExectionOutput = new RuleExectionOutput()
                {
                    xmlDoc = updatedDoc.OuterXml,
                    purchaseAmountPostTax = currentPurchase.purchaseAmount;
                };
                return Task.FromResult(ruleRunOutput);
            }
            catch(RuleEngineException ruleEngineException)
            {
                // Log any rule engine exceptions
                this.logger.LogCritical(ruleEngineException.ToString());
                throw;
            }
        }

        /// <summary>
        /// Output of the run rule
        /// </summary>
        public class RuleExectionOutput
        {
            /// <summary>
            /// rules updated xml document
            /// </summary>
            public string xmlDoc { get; set;}

            /// <summary>
            /// other facts 
            /// </summary>
            int purchaseAmountPostTax;
        }

        /// <summary>
        /// Example : Current purchase .NET fact class
        /// This can be added as an assembly in csproj, please refer UserAssembly example in csproj
        /// </summary>
        public class CurrentPurchase
        {
            /// <summary>
            /// Purchase amount
            /// </summary>
            public int purchaseAmount;

            private string zipCode;

            /// <summary>
            /// Constructor for CurrentPurchase
            /// </summary>
            public CurrentPurchase(int currentPurchase, string zipCode)
            {
                purchaseAmount = currentPurchase;
                this.zipCode = zipCode;
            }

            /// <summary>
            /// Business logic to calculate sales tax
            /// </summary>
            public int calculateSalesTax()
            {
                if (zipCode.StartsWith("9"))
                {
                    return purchaseAmount / 10;
                }
                return 0;
            }
        }
    }
}