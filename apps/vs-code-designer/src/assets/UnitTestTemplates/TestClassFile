using Microsoft.Azure.Workflows.UnitTesting;
using Microsoft.Azure.Workflows.UnitTesting.Definitions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace <%= LogicAppName %>.Tests
{
    [TestClass]
    public class <%= UnitTestName %>
    {
        /// <summary>
        /// The root path of the workspace project directory.
        /// </summary>
        private readonly string rootPath;

        /// <summary>
        /// The full path to the workflow JSON file.
        /// </summary>
        private readonly string workflowDefinitionPath;

        /// <summary>
        /// The full path to the connections JSON file.
        /// </summary>
        private readonly string connectionsPath;

        /// <summary>
        /// The full path to the parameters JSON file.
        /// </summary>
        private readonly string parametersPath;

        /// <summary>
        /// The full path to the local settings JSON file.
        /// </summary>
        private readonly string localSettingsPath;

        /// <summary>
        /// The mocked trigger outputs that are generated from a workflow run.
        /// </summary>
        public TriggerMock triggerMock;

        /// <summary>
        /// The mocked actions' outputs that are generated from a workflow run.
        /// </summary>
        public Dictionary<string, ActionMock> actionMocks;

         /// <summary>
        /// Initializes a new instance of the class named <see cref="<%= UnitTestName %>" />.
        /// </summary>
        public <%= UnitTestName %>()
        {
            // Set the path for workflow-related input files in the workspace and build the full paths to the required JSON files.
            this.rootPath = Path.GetFullPath(Path.Combine(AppContext.BaseDirectory, @"..\..\..\..\.."));
            this.workflowDefinitionPath = Path.Combine(this.rootPath, "<%= LogicAppName %>", "<%= WorkflowName %>", "workflow.json");
            this.connectionsPath = Path.Combine(this.rootPath, "<%= LogicAppName %>", "connections.json");
            this.parametersPath = Path.Combine(this.rootPath, "<%= LogicAppName %>", "parameters.json");
            this.localSettingsPath = Path.Combine(this.rootPath, "<%= LogicAppName %>", "local.settings.json");


            // Load the mock data 
            var mockDataPath = Path.Combine(this.rootPath, "Tests", "<%= LogicAppName %>", "<%= WorkflowName %>", "<%= UnitTestName %>", "<%= UnitTestName %>-mock.json");
            var mockData = JObject.Parse(File.ReadAllText(mockDataPath));
            var mockData = JsonConvert.DeserializeObject<TestMockData>(File.ReadAllText(mockDataPath));
            this.triggerMock = mockData.TriggerMock;
            this.actionMocks = mockData.ActionMocks;
        }

        /// <summary>
        /// A sample unit test for executing the workflow named <%= WorkflowName %>.
        /// This method shows how to set up mock data, execute the workflow, and assert the outcome.
        /// </summary>
        [TestMethod]
        public async Task <%= WorkflowName %>_<%= UnitTestName %>_ExecuteWorkflow_SUCCESS()
        {
            // PREPARE Mock
            var actionMocks = this.actionMocks;
            // actionMocks["<actionName>"] = new ActionMock(
            //     "<actionName>",
            //     TestWorkflowStatus.Succeeded,
            //     onGetActionOutputsCallback: this.MockActionOutputCallback
            // );

            // ACT
            // Create an instance of UnitTestExecutor, and run the workflow with the mock data.   
            var executor = new UnitTestExecutor(
                workflowFilePath: this.workflowDefinitionPath, 
                connectionsFilePath: this.connectionsPath, 
                parametersFilePath: this.parametersPath, 
                localSettingsFilePath: this.localSettingsPath
            );                
            var testRun = await executor.RunWorkflowAsync(triggerMock: this.triggerMock, actionMocks: actionMocks).ConfigureAwait(continueOnCapturedContext: false);

            // ASSERT
            // Verify that the workflow executed successfully, and the status is 'Succeeded'.
            Assert.IsNotNull(value: testRun);
            Assert.AreEqual(expected: TestWorkflowStatus.Succeeded, actual: testRun.Status);
        }

        #region Mock generator helpers

        /// <summary>
        /// The callback method to dynamically generate mocked data for the action named 'actionName'.
        /// You can modify this method to return different mock outputs based on the test scenario.
        /// </summary>
        /// <param name="context">The test execution context that contains information about the current test run.</param>
        public JToken MockActionOutputCallback(TestExecutionContext context)
        {
            // Sample mock data 1: Replace <your-test-JSON-value> with the appropriate mock data for the test.
            // return JObject.Parse(@"
            // {
            //     'statusCode': '200',
            //     'body': {
            //         <your-test-JSON-value>
            //     }
            // }");

            // Sample mock data 2: Modify the existing mocked data dynamically for '<actionName>'.
            // var mockDataToModify = this.actionMocks["<actionName>"];
            // mockDataToModify.Outputs["body"]["<property1Name>"] = "<your-test-string-value>";
            // return mockDataToModify.Outputs;
            return new JObject();
        }

        #endregion
    }
}