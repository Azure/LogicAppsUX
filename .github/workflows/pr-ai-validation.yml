name: PR AI Validation

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  pull-requests: write
  issues: write

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR with AI Agent
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.pull_request.number;
            
            try {
              // Call the AI validation endpoint
              const response = await fetch('https://good-test-case.azurewebsites.net:443/api/GitHubPRAgent/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=p26YNf7sdC9r1MpT-acz87UNzlpTnTnbfGFbEmDtGHc', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  pr_id: pr_number
                })
              });
              
              if (!response.ok) {
                throw new Error(`API request failed with status ${response.status}`);
              }
              
              const result = await response.json();
              
              // Post the validation result as a comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: `## ü§ñ AI PR Validation Report\n\n${result.message}`
              });
              
              // Manage labels based on result
              if (result.passes) {
                // Add success label
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr_number,
                    labels: ['pr-validated']
                  });
                } catch (e) {
                  console.log('Error adding pr-validated label:', e.message);
                }
                
                // Remove failure labels if they exist
                const labelsToRemove = ['needs-title-update', 'needs-description-update'];
                for (const label of labelsToRemove) {
                  try {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr_number,
                      name: label
                    });
                  } catch (e) {
                    // Label might not exist, that's okay
                  }
                }
              } else {
                // Add failure labels
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr_number,
                    labels: ['needs-pr-update']
                  });
                } catch (e) {
                  console.log('Error adding needs-pr-update label:', e.message);
                }
                
                // Remove success label if it exists
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr_number,
                    name: 'pr-validated'
                  });
                } catch (e) {
                  // Label might not exist, that's okay
                }
                
                // Fail the workflow
                core.setFailed('PR validation failed. Please address the issues mentioned in the validation report.');
              }
              
            } catch (error) {
              console.error('Error during PR validation:', error);
              
              // Post an error comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: `## ‚ùå PR Validation Error\n\nAn error occurred while validating your PR. Please try again later or contact the maintainers.\n\nError: ${error.message}`
              });
              
              core.setFailed(`PR validation error: ${error.message}`);
            }