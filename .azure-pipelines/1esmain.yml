# Trigger the build whenever `main` or `rel/*` is updated
trigger: none
  # - main
  # - rel/*

# Disable PR trigger
pr: none

# `resources` specifies the location of templates to pick up, use it to get 1ES templates
resources:
  repositories:
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/MicroBuildTemplate
      ref: refs/tags/release
    - repository: azExtTemplates
      type: github
      name: microsoft/vscode-azuretools
      ref: main
      endpoint: GitHub-AzureTools # The service connection to use when accessing this repository
    - repository: LogicAppsUX
      type: github
      name: Azure/LogicAppsUX
      endpoint: LogicApps-VSCode-connection  # The service connection to use when accessing this repository

parameters:
  # When true, skips the deployment job which actually publishes the extension
  - name: dryRun
    type: boolean
    default: true

  - name: enableSigning
    type: boolean
    default: True

  # The intended extension version to publish. 
  # This is used to verify the version in package.json matches the version to publish to avoid accidental publishing.
  - name: publishVersion
    type: string
    default: 4.85.3

  # Customize the environment to associate the deployment with. 
  # Useful to control which group of people should be required to approve the deployment.
  - name: environmentName
    type: string
    default: AzCodeDeploy

variables:
  # Required by MicroBuild template
  - name: TeamName
    value: "Azure Logic Apps for VS Code"
  - name: working_directory
    value: '.'

extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@1esPipelines
  parameters:
    sdl:
      credscan:
        suppressionsFile: $(Build.SourcesDirectory)\.azure-pipelines\compliance\CredScanSuppressions.json
      codeql:
        language: javascript # only build a codeql database for javascript, since the jsoncli pipeline handles csharp
      #   enabled: true # TODO: would like to enable only on scheduled builds but CodeQL cannot currently be disabled per https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/1es-codeql
    pool:
      name: VSEngSS-MicroBuild2022-1ES # Name of your hosted pool
      image: server2022-microbuildVS2022-1es # Name of the image in your pool. If not specified, first image of the pool is used
      os: windows # OS of the image. Allowed values: windows, linux, macOS
    stages:
      - stage: Build
        displayName: Build extension
        jobs:
          - job: Build
            templateContext:
              mb: # Enable the MicroBuild Signing toolset
                signing:
                  enabled: ${{ parameters.enableSigning }}
                  signType: real # options are 'real' & 'test'
                  zipSources: false
              outputs:
                - output: pipelineArtifact
                  targetPath: $(build.artifactstagingdirectory)/build/${{ parameters.publishVersion }}
                  artifactName: Build ${{ parameters.publishVersion }}
            steps:
              - script: git checkout v${{ parameters.publishVersion }} # Replace with your desired version to release
                displayName: 'Checkout to specific branch'
              - template: .azure-pipelines/templates/setup.yml@LogicAppsUX
              - template: .azure-pipelines/templates/build.yml@LogicAppsUX
              - template: .azure-pipelines/templates/package.yml@LogicAppsUX
              #- template: .azure-pipelines/templates/sign.yml@LogicAppsUX
              # Check if the SignExtension.signproj file exists and set a variable using PowerShell
              # All other steps in this template will only run if the file exists
              - powershell: |
                  $fileExists = Test-Path -Path "$(Build.SourcesDirectory)/.azure-pipelines/SignExtension.signproj"
                  Write-Output "##vso[task.setvariable variable=signprojExists]$fileExists"
                  
                  if ($fileExists) {
                      Write-Output "SignExtension.signproj file found. Signing extension."
                  } else {
                      Write-Output "SignExtension.signproj file not found. Skipping signing."
                  }
                displayName: "\U0001F449 Check for SignExtension.signproj File"
                condition: ${{ parameters.enableSigning }}

              # put the extension name and version from the package.json into variables to use later. Variables can be used in later steps as $(package.name) and $(package.version)
              - pwsh: | 
                  Write-Output "##vso[task.setvariable variable=name;isOutput=true]$((Get-Content -Raw -Path package.json | ConvertFrom-Json).name)"
                  Write-Output "##vso[task.setvariable variable=version;isOutput=true]$((Get-Content -Raw -Path package.json | ConvertFrom-Json).version)"
                condition: eq(variables['signprojExists'], True)
                name: package
                displayName: "\U0001F449 Get extension info from package.json"

              - script: cd apps/vs-code-designer/dist && npx @vscode/vsce generate-manifest -i vscode-azurelogicapps-$(package.version).vsix -o $(Build.SourcesDirectory)/extension.manifest
                condition: eq(variables['signprojExists'], True)
                displayName: "\U0001F449 Generate extension manifest"

              # this task will pass even if signing fails, so we follow it up with a check to see if the signature file was created
              - task: DotNetCoreCLI@2
                condition: eq(variables['signprojExists'], True)
                displayName: "\U0001F449 Sign with MSBuild"
                inputs:
                  command: 'build'
                  projects: $(Build.SourcesDirectory)/.azure-pipelines/SignExtension.signproj

              - pwsh: |
                  $filePath = "extension.signature.p7s"

                  if (-Not (Test-Path $filePath)) {
                      Write-Error "The file '$filePath' does not exist."
                      exit 1
                  }

                  Write-Output "The file '$filePath' exists."
                  exit 0
                displayName: "\U0001F449 Verify extension.signature.p7s file was created"
                condition: eq(variables['signprojExists'], True)
              #- template: .azure-pipelines/templates/stage-artifacts.yml@LogicAppsUX
              - task: CopyFiles@2
                displayName: "\U0001F449 Copy packages and vsix to staging directory"
                inputs:
                  # Uploading the package.json so we can publish later without cloning the source
                  # Files related to signing:
                  #   extension.manifest is the signature file
                  #   extension.signature.p7s is the extension manifest generated by vsce
                  Contents: |
                    **/*.vsix
                    package.json
                    extension.manifest
                    extension.signature.p7s
                    **/*.tar.gz
                    **/*.tgz
                  TargetFolder: "$(build.artifactstagingdirectory)/build/${{ parameters.publishVersion }}"
                condition: succeeded()
      - stage: Release      
        displayName: Publish extension
        extends:
          template: azure-pipelines/release-extension.yml@azExtTemplates
          parameters:
            pipelineID: $(resources.pipeline.build.pipelineID)
            runID: $(resources.pipeline.build.runID)
            publishVersion: ${{ parameters.publishVersion }}
            dryRun: ${{ parameters.dryRun }}
            environmentName: ${{ parameters.environmentName }}
