import { ParentDataType } from '../models';
import type { FunctionData } from '../models/Function';
import { FunctionCategory } from '../models/Function';

export const functionMock: FunctionData[] = [
  {
    key: 'Maximum',
    maxNumberOfInputs: 2,
    type: 'TransformationFunction',
    functionName: 'max',
    outputValueType: ParentDataType.Number,
    inputs: [
      {
        name: 'value',
        allowedTypes: [ParentDataType.Number, ParentDataType.Decimal, ParentDataType.Integer],
        isOptional: false,
        allowCustomInput: false,
        displayName: 'Value',
        tooltip: 'The value to use',
        placeholder: 'The value',
      },
      {
        name: 'scope',
        allowedTypes: [ParentDataType.Any],
        isOptional: true,
        allowCustomInput: false,
        displayName: 'Scope',
        tooltip: 'The scope to use',
        placeholder: 'The scope',
      },
    ],
    displayName: 'Max',
    category: FunctionCategory.Math,
    description: 'The max between two values',
    tooltip: 'Max between two values',
  },
  {
    key: 'Minimum',
    maxNumberOfInputs: 2,
    type: 'TransformationFunction',
    functionName: 'min',
    outputValueType: ParentDataType.Number,
    inputs: [
      {
        name: 'value',
        allowedTypes: [ParentDataType.Number, ParentDataType.Decimal, ParentDataType.Integer],
        isOptional: false,
        allowCustomInput: false,
        displayName: 'Value',
        tooltip: 'The value to use',
        placeholder: 'The value',
      },
      {
        name: 'scope',
        allowedTypes: [ParentDataType.Any],
        isOptional: true,
        allowCustomInput: false,
        displayName: 'Scope',
        tooltip: 'The scope to use',
        placeholder: 'The scope',
      },
    ],
    displayName: 'Min',
    category: FunctionCategory.Math,
    iconFileName: '',
    description: 'The min between 2 numbers',
    tooltip: 'The min',
  },
  {
    key: 'Average',
    maxNumberOfInputs: 2,
    type: 'TransformationFunction',
    functionName: 'avg',
    outputValueType: ParentDataType.Number,
    inputs: [
      {
        name: 'value',
        allowedTypes: [ParentDataType.Number, ParentDataType.Decimal, ParentDataType.Integer],
        isOptional: false,
        allowCustomInput: false,
        displayName: 'Value',
        tooltip: 'The value to use',
        placeholder: 'The value',
      },
      {
        name: 'scope',
        allowedTypes: [ParentDataType.Any],
        isOptional: true,
        allowCustomInput: false,
        displayName: 'Scope',
        tooltip: 'The scope to use',
        placeholder: 'The scope',
      },
    ],
    displayName: 'Average',
    category: FunctionCategory.Math,
    description: 'The average between two numbers',
    tooltip: 'The average',
  },
  {
    key: 'ForEach',
    maxNumberOfInputs: 2,
    type: 'TransformationControlFunction',
    functionName: '$for',
    outputValueType: ParentDataType.Any,
    inputs: [
      {
        name: 'collection',
        allowedTypes: [ParentDataType.Any],
        isOptional: false,
        allowCustomInput: false,
        displayName: 'Scope',
        tooltip: 'The scope to use',
        placeholder: 'The scope',
      },
      {
        name: 'indexVariable',
        allowedTypes: [ParentDataType.String],
        isOptional: true,
        allowCustomInput: true,
        displayName: 'Index',
        tooltip: 'The index of the loop',
        placeholder: 'The index',
      },
    ],
    displayName: 'For Each',
    category: FunctionCategory.Utility,
    description: 'Step through your loop',
    tooltip: 'A basic For Each',
  },
  {
    key: 'Condition',
    maxNumberOfInputs: 1,
    type: 'TransformationControlFunction',
    functionName: '$if',
    outputValueType: ParentDataType.Any,
    inputs: [
      {
        name: 'condition',
        allowedTypes: [ParentDataType.Boolean],
        isOptional: false,
        allowCustomInput: true,
        displayName: 'Scope',
        tooltip: 'The scope to use',
        placeholder: 'The scope',
      },
    ],
    displayName: 'Condition',
    category: FunctionCategory.Utility,
    description: 'The condition to evaluate',
    tooltip: 'Input condition',
  },
  {
    key: 'CurrentDate',
    maxNumberOfInputs: 0,
    type: 'TransformationFunction',
    functionName: 'current-date',
    outputValueType: ParentDataType.DateTime,
    inputs: [],
    displayName: 'Current Date',
    category: FunctionCategory.DateTime,
    description: 'Current date in the current time zone',
    tooltip: 'Current date',
  },
];
