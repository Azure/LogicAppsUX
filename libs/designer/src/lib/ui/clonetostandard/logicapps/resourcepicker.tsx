import { useDispatch, useSelector } from 'react-redux';
import { ResourcePicker } from '../../common/resourcepicker/resourcepicker';
import type { AppDispatch, RootState } from '../../../core/state/clonetostandard/store';
import {
  setDestinationWorkflowAppDetails,
  setDestinationResourceGroup,
  setDestinationSubscription,
  updateTargetWorkflowName,
  updateTargetWorkflowNameValidationError,
} from '../../../core/state/clonetostandard/cloneslice';
import { isUndefinedOrEmptyString } from '@microsoft/logic-apps-shared';
import { getWorkflowResourcesInTemplate } from '../../../core';
import { useCallback } from 'react';

export const CloneResourcePicker = () => {
  const dispatch = useDispatch<AppDispatch>();
  const {
    sourceApps,
    destinationApp: { subscriptionId: destSubscriptionId, resourceGroup: destResourceGroup, logicAppName: destLogicAppName },
  } = useSelector((state: RootState) => state.clone);
  const sourceApp = sourceApps?.[0];

  const handleOnLogicAppSelect = useCallback(
    async (value: {
      name: string;
      location: string;
    }) => {
      dispatch(setDestinationWorkflowAppDetails(value));
      const existingWorkflowNames = await getWorkflowResourcesInTemplate(
        destSubscriptionId,
        destResourceGroup,
        /* logicAppName */ value.name
      );
      if (isUndefinedOrEmptyString(sourceApp?.targetWorkflowName) || isWorkflowNameAutoGenerated(sourceApp?.targetWorkflowName)) {
        const baseName = sourceApp?.logicAppName ? `${sourceApp?.logicAppName || ''}_clone` : '';

        let counter = 1;
        let newName = baseName;

        while (existingWorkflowNames?.includes(newName)) {
          newName = `${baseName}${counter}`;
          counter++;
        }

        dispatch(updateTargetWorkflowName(newName));
        dispatch(updateTargetWorkflowNameValidationError(undefined));
      }
    },
    [dispatch, destResourceGroup, destSubscriptionId, sourceApp?.targetWorkflowName, sourceApp?.logicAppName]
  );

  return (
    <ResourcePicker
      viewMode={'default'}
      renderType={'section'}
      resourceState={{
        subscriptionId: destSubscriptionId,
        resourceGroup: destResourceGroup,
        location: '',
        workflowAppName: destLogicAppName,
        logicAppName: undefined,
        isConsumption: false,
      }}
      onSubscriptionSelect={(value) => dispatch(setDestinationSubscription(value))}
      onResourceGroupSelect={(value) => dispatch(setDestinationResourceGroup(value))}
      onLocationSelect={(_value) => {}}
      onLogicAppSelect={handleOnLogicAppSelect}
      onLogicAppInstanceSelect={(_value) => {}}
    />
  );
};

const isWorkflowNameAutoGenerated = (name: string) => {
  const regex = /^[A-Za-z][A-Za-z0-9]*(?:[_-][A-Za-z0-9]+)*_clone\d*$/;
  return regex.test(name);
};
