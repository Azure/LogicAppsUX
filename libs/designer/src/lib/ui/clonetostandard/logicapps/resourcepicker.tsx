import { useDispatch, useSelector } from 'react-redux';
import { ResourcePicker } from '../../common/resourcepicker/resourcepicker';
import type { AppDispatch, RootState } from '../../../core/state/clonetostandard/store';
import {
  setDestinationWorkflowAppDetails,
  setDestinationResourceGroup,
  setDestinationSubscription,
  updateTargetWorkflowName,
  updateTargetWorkflowNameValidationError,
} from '../../../core/state/clonetostandard/cloneslice';
import { isUndefinedOrEmptyString } from '@microsoft/logic-apps-shared';
import { getWorkflowResourcesInTemplate } from '../../../core';
import { useCallback } from 'react';
import { getCloneWorkflowName } from '../../../core/clonetostandard/utils/helper';
import { useIntl } from 'react-intl';

export const CloneResourcePicker = () => {
  const intl = useIntl();
  const dispatch = useDispatch<AppDispatch>();
  const {
    sourceApps,
    destinationApp: {
      subscriptionId: destSubscriptionId,
      resourceGroup: destResourceGroup,
      location: destLocation,
      logicAppName: destLogicAppName,
    },
    runValidation,
  } = useSelector((state: RootState) => state.clone);
  const sourceApp = sourceApps?.[0];

  const handleOnLogicAppSelect = useCallback(
    async (value: {
      name: string;
      location: string;
    }) => {
      dispatch(setDestinationWorkflowAppDetails(value));
      const existingWorkflowNames = await getWorkflowResourcesInTemplate(
        destSubscriptionId,
        destResourceGroup,
        /* logicAppName */ value.name
      );
      if (isUndefinedOrEmptyString(sourceApp?.targetWorkflowName) || isWorkflowNameAutoGenerated(sourceApp?.targetWorkflowName)) {
        const newName = getCloneWorkflowName(sourceApp?.logicAppName || '', existingWorkflowNames);

        dispatch(updateTargetWorkflowName(newName));
        dispatch(updateTargetWorkflowNameValidationError(undefined));
      }
    },
    [dispatch, destResourceGroup, destSubscriptionId, sourceApp?.targetWorkflowName, sourceApp?.logicAppName]
  );

  return (
    <ResourcePicker
      viewMode={'default'}
      renderType={'section'}
      resourceState={{
        subscriptionId: destSubscriptionId,
        resourceGroup: destResourceGroup,
        location: destLocation,
        workflowAppName: destLogicAppName,
        logicAppName: undefined,
        isConsumption: false,
      }}
      onSubscriptionSelect={(value) => dispatch(setDestinationSubscription(value))}
      onResourceGroupSelect={(value) => dispatch(setDestinationResourceGroup(value))}
      onLocationSelect={(_value) => {}}
      onLogicAppSelect={handleOnLogicAppSelect}
      onLogicAppInstanceSelect={(_value) => {}}
      showErrorMessage={runValidation}
      hintTooltips={{
        logicapp: intl.formatMessage({
          defaultMessage: 'Keep or edit the default name for the destination Standard logic app.',
          id: 'hN6rCv',
          description: 'Description for the destination logic app',
        }),
      }}
    />
  );
};

const isWorkflowNameAutoGenerated = (name: string) => {
  const regex = /^[A-Za-z][A-Za-z0-9]*(?:[_-][A-Za-z0-9]+)*_clone\d*$/;
  return regex.test(name);
};
