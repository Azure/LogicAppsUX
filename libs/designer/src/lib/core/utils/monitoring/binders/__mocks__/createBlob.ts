export default {
  operation: {
    operationId: 'CreateFile_V2',
    description: 'This operation uploads a blob to Azure Blob Storage.',
    method: 'post',
    path: '/{connectionId}/v2/datasets/{dataset}/files',
    summary: 'Create blob (V2)',
    visibility: 'important',
    annotation: {
      status: 'Production',
    },
    externalDocs: {
      url: 'https://docs.microsoft.com/connectors/azureblob/#create-blob-(v2)',
      description: 'This operation uploads a blob to Azure Blob Storage.',
    },
    supportsPaging: false,
    uploadChunkMetadata: {
      chunkTransferSupported: true,
      acceptUploadSize: false,
    },
    downloadChunkMetadata: {
      acceptDownloadSize: false,
    },
  },
  nodeParameters: {
    'path.$.dataset': {
      id: 'CCD462EC-2CFD-4624-9156-F9A4A8974BCA',
      dynamicData: {
        status: 'succeeded',
      },
      editor: 'combobox',
      editorOptions: {
        options: [
          {
            value: 'AccountNameFromSettings',
            displayName: 'Use connection settings(consumptioncharlie)',
            disabled: false,
          },
        ],
      },
      info: {
        encode: 'double',
        in: 'path',
        isDynamic: false,
      },
      hideInUI: false,
      label: 'Storage account name or blob endpoint',
      parameterKey: 'path.$.dataset',
      parameterName: 'dataset',
      placeholder: 'Azure Storage account name or blob endpoint.',
      preservedValue: "@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}",
      required: true,
      schema: {
        description: 'Azure Storage account name or blob endpoint.',
        type: 'string',
        'x-ms-summary': 'Storage account name or blob endpoint',
        'x-ms-dynamic-values': {
          operationId: 'GetDataSets',
          parameters: {},
          'value-collection': 'value',
          'value-path': 'Name',
          'value-title': 'DisplayName',
        },
        'x-ms-url-encoding': 'double',
      },
      showErrors: false,
      showTokens: true,
      type: 'string',
      value: [
        {
          id: 'D3BC7223-1177-470E-A94E-2396F5494714',
          type: 'literal',
          value: 'AccountNameFromSettings',
        },
      ],
    },
    'query.$.folderPath': {
      id: 'FA32CFAB-1DAC-497D-8DBF-A2A3B7C7C6F7',
      dynamicData: {
        status: 'notstarted',
      },
      editor: 'filepicker',
      editorOptions: {
        pickerType: 'folder',
        fileFilters: [],
      },
      editorViewModel: {},
      info: {
        in: 'query',
        isDynamic: false,
      },
      hideInUI: false,
      label: 'Folder path',
      parameterKey: 'query.$.folderPath',
      parameterName: 'folderPath',
      placeholder: 'Specify folder path to upload.',
      preservedValue: '/test1',
      required: true,
      schema: {
        description: 'Specify folder path to upload.',
        type: 'string',
        'x-ms-summary': 'Folder path',
        'x-ms-dynamic-values': {
          capability: 'file-picker',
          parameters: {
            isFolder: true,
            fileFilter: [],
            dataset: {
              parameter: 'dataset',
            },
          },
          'value-path': 'Path',
        },
        'x-ms-dynamic-tree': {
          settings: {
            canSelectParentNodes: true,
            canSelectLeafNodes: false,
          },
          open: {
            operationId: 'ListAllRootFolders_V4',
            itemValuePath: 'Path',
            itemTitlePath: 'DisplayName',
            itemIsParent: '(IsFolder eq true)',
            itemFullTitlePath: 'Path',
            itemsPath: 'value',
            parameters: {
              dataset: {
                parameterReference: 'dataset',
              },
            },
          },
          browse: {
            operationId: 'ListFolder_V4',
            itemValuePath: 'Path',
            itemTitlePath: 'DisplayName',
            itemIsParent: '(IsFolder eq true)',
            itemFullTitlePath: 'Path',
            itemsPath: 'value',
            parameters: {
              dataset: {
                parameterReference: 'dataset',
              },
              id: {
                selectedItemValuePath: 'Id',
              },
            },
          },
        },
      },
      showErrors: false,
      showTokens: true,
      type: 'string',
      value: [
        {
          id: '71A8B987-9830-4BE6-B319-C9DF9CF8716F',
          type: 'literal',
          value: '/test1',
        },
      ],
    },
    'query.$.name': {
      id: '22FA2D11-7988-4C89-98DE-5B75ED23767B',
      info: {
        in: 'query',
        isDynamic: false,
      },
      hideInUI: false,
      label: 'Blob name',
      parameterKey: 'query.$.name',
      parameterName: 'name',
      placeholder: 'Specify name of the blob to create.',
      preservedValue: 'test1',
      required: true,
      schema: {
        description: 'Specify name of the blob to create.',
        type: 'string',
        'x-ms-summary': 'Blob name',
      },
      showErrors: false,
      showTokens: true,
      type: 'string',
      value: [
        {
          id: '380FED3E-66ED-4F7F-8890-42485A3A0CD2',
          type: 'literal',
          value: 'test1',
        },
      ],
    },
    'body.$': {
      id: '7F470C9F-C959-4ABB-8F04-38A54087412E',
      info: {
        format: 'binary',
        in: 'body',
        isDynamic: false,
      },
      hideInUI: false,
      label: 'Blob content',
      parameterKey: 'body.$',
      parameterName: 'body',
      placeholder: 'Specify the content of the blob to upload.',
      preservedValue: '{"TEST":1}',
      required: true,
      schema: {
        format: 'binary',
        type: 'string',
      },
      showErrors: false,
      showTokens: true,
      type: 'string',
      value: [
        {
          id: '866C4258-2B12-4EF4-AC2A-61DCD36DABE2',
          type: 'literal',
          value: '{"TEST":1}',
        },
      ],
    },
    'header.$.Content-Type': {
      id: '453E33AC-A500-411F-BC7B-CF158A96F009',
      info: {
        in: 'header',
        isDynamic: false,
      },
      hideInUI: false,
      conditionalVisibility: false,
      label: 'Content-Type',
      parameterKey: 'header.$.Content-Type',
      parameterName: 'Content-Type',
      placeholder: 'Specify content-type of the blob to upload.',
      required: false,
      schema: {
        description: 'Specify content-type of the blob to upload.',
        type: 'string',
        'x-ms-summary': 'Content-Type',
        'x-ms-visibility': 'advanced',
      },
      showErrors: false,
      showTokens: true,
      type: 'string',
      value: [
        {
          id: 'D65B5985-A9E2-492E-B864-4B0E86C3489F',
          type: 'literal',
          value: '',
        },
      ],
      visibility: 'advanced',
    },
    'query.$.queryParametersSingleEncoded': {
      id: 'A9B0832E-AE35-4366-B12A-439495CF2210',
      editor: 'combobox',
      editorOptions: {
        options: [
          {
            displayName: '',
            value: '',
            key: '',
          },
          {
            displayName: 'Yes',
            value: true,
            key: 'Yes',
          },
          {
            displayName: 'No',
            value: false,
            key: 'No',
          },
        ],
      },
      info: {
        in: 'query',
        isDynamic: false,
      },
      hideInUI: true,
      conditionalVisibility: true,
      label: 'queryParametersSingleEncoded',
      parameterKey: 'query.$.queryParametersSingleEncoded',
      parameterName: 'queryParametersSingleEncoded',
      preservedValue: true,
      required: false,
      schema: {
        default: true,
        type: 'boolean',
        'x-ms-visibility': 'internal',
      },
      showErrors: false,
      showTokens: true,
      type: 'boolean',
      value: [
        {
          id: '6170C57B-D845-499D-B02D-FA8EF6B1686C',
          type: 'literal',
          value: 'true',
        },
      ],
      visibility: 'internal',
    },
    'header.$.ReadFileMetadataFromServer': {
      id: '79DBE281-2945-4F69-92F5-75D77CC22E37',
      editor: 'combobox',
      editorOptions: {
        options: [
          {
            displayName: '',
            value: '',
            key: '',
          },
          {
            displayName: 'Yes',
            value: true,
            key: 'Yes',
          },
          {
            displayName: 'No',
            value: false,
            key: 'No',
          },
        ],
      },
      info: {
        in: 'header',
        isDynamic: false,
      },
      hideInUI: true,
      conditionalVisibility: true,
      label: 'ReadFileMetadataFromServer',
      parameterKey: 'header.$.ReadFileMetadataFromServer',
      parameterName: 'ReadFileMetadataFromServer',
      placeholder:
        'Get all file metadata from the server after file creation is complete. If this is false, some metadata properties may not be returned such as last modified time, etc.',
      preservedValue: true,
      required: false,
      schema: {
        description:
          'Get all file metadata from the server after file creation is complete. If this is false, some metadata properties may not be returned such as last modified time, etc.',
        default: true,
        type: 'boolean',
        'x-ms-summary': 'ReadFileMetadataFromServer',
        'x-ms-visibility': 'internal',
      },
      showErrors: false,
      showTokens: true,
      type: 'boolean',
      value: [
        {
          id: '82BD496D-55D7-4ECA-8949-8EEEDC73795C',
          type: 'literal',
          value: 'true',
        },
      ],
      visibility: 'internal',
    },
  },
  operationMetadata: undefined,
  inputs: {
    method: 'post',
    queries: {
      folderPath: '/test1',
      name: 'test1',
      queryParametersSingleEncoded: 'True',
    },
    headers: {
      ReadFileMetadataFromServer: 'True',
    },
    path: '/v2/datasets/AccountNameFromSettings/files',
    host: {
      connection: {
        referenceName: 'azureblob-1',
      },
    },
    body: '{"TEST":1}',
  },
  inputsParametersByName: {
    'path.$.dataset': {
      key: 'path.$.dataset',
      description: 'Azure Storage account name or blob endpoint.',
      dynamicValues: {
        type: 'LegacyDynamicValues',
        extension: {
          operationId: 'GetDataSets',
          parameters: {},
          'value-collection': 'value',
          'value-path': 'Name',
          'value-title': 'DisplayName',
        },
      },
      editor: 'combobox',
      editorOptions: {
        options: [],
      },
      encode: 'double',
      in: 'path',
      name: 'dataset',
      required: true,
      schema: {
        description: 'Azure Storage account name or blob endpoint.',
        type: 'string',
        'x-ms-summary': 'Storage account name or blob endpoint',
        'x-ms-dynamic-values': {
          operationId: 'GetDataSets',
          parameters: {},
          'value-collection': 'value',
          'value-path': 'Name',
          'value-title': 'DisplayName',
        },
        'x-ms-url-encoding': 'double',
      },
      summary: 'Storage account name or blob endpoint',
      type: 'string',
      hideInUI: false,
      value: "@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}",
    },
    'query.$.folderPath': {
      key: 'query.$.folderPath',
      description: 'Specify folder path to upload.',
      dynamicValues: {
        type: 'LegacyDynamicValues',
        extension: {
          capability: 'file-picker',
          parameters: {
            isFolder: true,
            fileFilter: [],
            dataset: {
              parameter: 'dataset',
            },
          },
          'value-path': 'Path',
        },
      },
      editor: 'filepicker',
      editorOptions: {
        options: [],
      },
      in: 'query',
      name: 'folderPath',
      required: true,
      schema: {
        description: 'Specify folder path to upload.',
        type: 'string',
        'x-ms-summary': 'Folder path',
        'x-ms-dynamic-values': {
          capability: 'file-picker',
          parameters: {
            isFolder: true,
            fileFilter: [],
            dataset: {
              parameter: 'dataset',
            },
          },
          'value-path': 'Path',
        },
        'x-ms-dynamic-tree': {
          settings: {
            canSelectParentNodes: true,
            canSelectLeafNodes: false,
          },
          open: {
            operationId: 'ListAllRootFolders_V4',
            itemValuePath: 'Path',
            itemTitlePath: 'DisplayName',
            itemIsParent: '(IsFolder eq true)',
            itemFullTitlePath: 'Path',
            itemsPath: 'value',
            parameters: {
              dataset: {
                parameterReference: 'dataset',
              },
            },
          },
          browse: {
            operationId: 'ListFolder_V4',
            itemValuePath: 'Path',
            itemTitlePath: 'DisplayName',
            itemIsParent: '(IsFolder eq true)',
            itemFullTitlePath: 'Path',
            itemsPath: 'value',
            parameters: {
              dataset: {
                parameterReference: 'dataset',
              },
              id: {
                selectedItemValuePath: 'Id',
              },
            },
          },
        },
      },
      summary: 'Folder path',
      type: 'string',
      hideInUI: false,
      value: '/test1',
    },
    'query.$.name': {
      key: 'query.$.name',
      description: 'Specify name of the blob to create.',
      in: 'query',
      name: 'name',
      required: true,
      schema: {
        description: 'Specify name of the blob to create.',
        type: 'string',
        'x-ms-summary': 'Blob name',
      },
      summary: 'Blob name',
      type: 'string',
      hideInUI: false,
      value: 'test1',
    },
    'body.$': {
      key: 'body.$',
      description: 'Specify the content of the blob to upload.',
      format: 'binary',
      in: 'body',
      name: 'body',
      required: true,
      schema: {
        format: 'binary',
        type: 'string',
      },
      summary: 'Blob content',
      type: 'string',
      hideInUI: false,
      value: '{"TEST":1}',
    },
    'query.$.queryParametersSingleEncoded': {
      key: 'query.$.queryParametersSingleEncoded',
      default: true,
      editor: 'combobox',
      editorOptions: {
        options: [
          {
            displayName: '',
            value: '',
            key: '',
          },
          {
            displayName: 'Yes',
            value: true,
            key: 'Yes',
          },
          {
            displayName: 'No',
            value: false,
            key: 'No',
          },
        ],
      },
      enum: [
        {
          displayName: '',
          value: '',
        },
        {
          displayName: 'Yes',
          value: true,
        },
        {
          displayName: 'No',
          value: false,
        },
      ],
      in: 'query',
      name: 'queryParametersSingleEncoded',
      required: false,
      schema: {
        default: true,
        type: 'boolean',
        'x-ms-visibility': 'internal',
      },
      type: 'boolean',
      visibility: 'internal',
      hideInUI: false,
      value: true,
    },
    'header.$.ReadFileMetadataFromServer': {
      key: 'header.$.ReadFileMetadataFromServer',
      default: true,
      description:
        'Get all file metadata from the server after file creation is complete. If this is false, some metadata properties may not be returned such as last modified time, etc.',
      editor: 'combobox',
      editorOptions: {
        options: [
          {
            displayName: '',
            value: '',
            key: '',
          },
          {
            displayName: 'Yes',
            value: true,
            key: 'Yes',
          },
          {
            displayName: 'No',
            value: false,
            key: 'No',
          },
        ],
      },
      enum: [
        {
          displayName: '',
          value: '',
        },
        {
          displayName: 'Yes',
          value: true,
        },
        {
          displayName: 'No',
          value: false,
        },
      ],
      in: 'header',
      name: 'ReadFileMetadataFromServer',
      required: false,
      schema: {
        description:
          'Get all file metadata from the server after file creation is complete. If this is false, some metadata properties may not be returned such as last modified time, etc.',
        default: true,
        type: 'boolean',
        'x-ms-summary': 'ReadFileMetadataFromServer',
        'x-ms-visibility': 'internal',
      },
      summary: 'ReadFileMetadataFromServer',
      type: 'boolean',
      visibility: 'internal',
      hideInUI: false,
      value: true,
    },
    'header.$.Content-Type': {
      key: 'header.$.Content-Type',
      description: 'Specify content-type of the blob to upload.',
      in: 'header',
      name: 'Content-Type',
      required: false,
      schema: {
        description: 'Specify content-type of the blob to upload.',
        type: 'string',
        'x-ms-summary': 'Content-Type',
        'x-ms-visibility': 'advanced',
      },
      summary: 'Content-Type',
      type: 'string',
      visibility: 'advanced',
      hideInUI: false,
    },
  },
  outputsParametersByName: {
    'body.$': {
      key: 'body.$',
      type: 'object',
      isAdvanced: false,
      name: 'key-body-output',
      title: 'Blob metadata',
      schema: {
        description: 'Blob metadata',
        type: 'object',
        properties: {
          Id: {
            description: 'The unique id of the file or folder.',
            type: 'string',
          },
          Name: {
            description: 'The name of the file or folder.',
            type: 'string',
          },
          DisplayName: {
            description: 'The display name of the file or folder.',
            type: 'string',
          },
          Path: {
            description: 'The path of the file or folder.',
            type: 'string',
          },
          LastModified: {
            format: 'date-time',
            description: 'The date and time the file or folder was last modified.',
            type: 'string',
          },
          Size: {
            format: 'int64',
            description: 'The size of the file or folder.',
            type: 'integer',
          },
          MediaType: {
            description: 'The media type of the file or folder.',
            type: 'string',
          },
          IsFolder: {
            description: 'A boolean value (true, false) to indicate whether or not the blob is a folder.',
            type: 'boolean',
          },
          ETag: {
            description: 'The etag of the file or folder.',
            type: 'string',
          },
          FileLocator: {
            description: 'The filelocator of the file or folder.',
            type: 'string',
          },
        },
      },
      source: 'body',
      required: true,
      description: 'Blob metadata',
    },
    'body.$.Id': {
      key: 'body.$.Id',
      type: 'string',
      isAdvanced: false,
      name: 'Id',
      title: 'Id',
      schema: {
        description: 'The unique id of the file or folder.',
        type: 'string',
      },
      source: 'body',
      required: false,
      description: 'The unique id of the file or folder.',
    },
    'body.$.Name': {
      key: 'body.$.Name',
      type: 'string',
      isAdvanced: false,
      name: 'Name',
      title: 'Name',
      schema: {
        description: 'The name of the file or folder.',
        type: 'string',
      },
      source: 'body',
      required: false,
      description: 'The name of the file or folder.',
    },
    'body.$.DisplayName': {
      key: 'body.$.DisplayName',
      type: 'string',
      isAdvanced: false,
      name: 'DisplayName',
      title: 'DisplayName',
      schema: {
        description: 'The display name of the file or folder.',
        type: 'string',
      },
      source: 'body',
      required: false,
      description: 'The display name of the file or folder.',
    },
    'body.$.Path': {
      key: 'body.$.Path',
      type: 'string',
      isAdvanced: false,
      name: 'Path',
      title: 'Path',
      schema: {
        description: 'The path of the file or folder.',
        type: 'string',
      },
      source: 'body',
      required: false,
      description: 'The path of the file or folder.',
    },
    'body.$.LastModified': {
      key: 'body.$.LastModified',
      type: 'string',
      format: 'date-time',
      isAdvanced: false,
      name: 'LastModified',
      title: 'LastModified',
      schema: {
        format: 'date-time',
        description: 'The date and time the file or folder was last modified.',
        type: 'string',
      },
      source: 'body',
      required: false,
      description: 'The date and time the file or folder was last modified.',
    },
    'body.$.Size': {
      key: 'body.$.Size',
      type: 'integer',
      format: 'int64',
      isAdvanced: false,
      name: 'Size',
      title: 'Size',
      schema: {
        format: 'int64',
        description: 'The size of the file or folder.',
        type: 'integer',
      },
      source: 'body',
      required: false,
      description: 'The size of the file or folder.',
    },
    'body.$.MediaType': {
      key: 'body.$.MediaType',
      type: 'string',
      isAdvanced: false,
      name: 'MediaType',
      title: 'MediaType',
      schema: {
        description: 'The media type of the file or folder.',
        type: 'string',
      },
      source: 'body',
      required: false,
      description: 'The media type of the file or folder.',
    },
    'body.$.IsFolder': {
      key: 'body.$.IsFolder',
      type: 'boolean',
      isAdvanced: false,
      name: 'IsFolder',
      title: 'IsFolder',
      schema: {
        description: 'A boolean value (true, false) to indicate whether or not the blob is a folder.',
        type: 'boolean',
      },
      source: 'body',
      required: false,
      description: 'A boolean value (true, false) to indicate whether or not the blob is a folder.',
    },
    'body.$.ETag': {
      key: 'body.$.ETag',
      type: 'string',
      isAdvanced: false,
      name: 'ETag',
      title: 'ETag',
      schema: {
        description: 'The etag of the file or folder.',
        type: 'string',
      },
      source: 'body',
      required: false,
      description: 'The etag of the file or folder.',
    },
    'body.$.FileLocator': {
      key: 'body.$.FileLocator',
      type: 'string',
      isAdvanced: false,
      name: 'FileLocator',
      title: 'FileLocator',
      schema: {
        description: 'The filelocator of the file or folder.',
        type: 'string',
      },
      source: 'body',
      required: false,
      description: 'The filelocator of the file or folder.',
    },
  },
  outputs: {
    statusCode: 200,
    headers: {
      'Cache-Control': 'no-store, no-cache',
      Pragma: 'no-cache',
      'Transfer-Encoding': 'chunked',
      Vary: 'Accept-Encoding',
      'Set-Cookie': 'cookies',
      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
      'x-ms-request-id': '349a8740-3cca-41c4-9533-0cfacc4df7c4',
      'X-Content-Type-Options': 'nosniff',
      'X-Frame-Options': 'DENY',
      'x-ms-connection-parameter-set-name': 'keyBasedAuth',
      'Timing-Allow-Origin': '*',
      'x-ms-apihub-cached-response': 'false',
      'x-ms-apihub-obo': 'false',
      Date: 'Wed, 18 Sep 2024 20:20:03 GMT',
      'Content-Type': 'application/json; charset=utf-8',
      'Content-Length': '290',
      Expires: '-1',
    },
    body: {
      Id: 'idValues',
      Name: 'test1',
      DisplayName: 'test1',
      Path: '/test1/test1',
      LastModified: '2024-09-18T20:20:04Z',
      Size: 10,
      MediaType: 'application/octet-stream',
      IsFolder: false,
      ETag: '"0x8DCD81F4823D141"',
      FileLocator: 'idValues',
      LastModifiedBy: null,
    },
  },
};
