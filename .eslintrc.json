{
  "root": true,
  "ignorePatterns": [
    "**/*"
  ],
  "plugins": [
    "formatjs",
    "react",
    "react-hooks"
  ],
  "overrides": [
    {
      "files": [
        "*.ts",
        "*.tsx"
      ],
      "extends": [
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript"
      ],
      "rules": {
        "no-restricted-syntax": [
          "error",
          {
            "selector": "TSEnumDeclaration",
            "message": "Don't use enums."
          }
        ],
        "react-hooks/exhaustive-deps": [
          "warn",
          {
            "additionalHooks": "useDebouncedEffect"
          }
        ],
        "react/jsx-no-useless-fragment": [
          1,
          {
            "allowExpressions": true
          }
        ],
        "import/no-unresolved": "off",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_",
            "destructuredArrayIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/consistent-type-assertions": [
          "error",
          {
            "assertionStyle": "as"
          }
        ],
        "@typescript-eslint/consistent-type-imports": [
          2,
          {
            "prefer": "type-imports",
            "disallowTypeAnnotations": true
          }
        ],
        "formatjs/enforce-id": [
          "error",
          {
            "idInterpolationPattern": "[sha512:contenthash:base64:6]"
          }
        ],
        "formatjs/enforce-placeholders": [
          "error",
          {
            "ignoreList": [
              "foo"
            ]
          }
        ],
        "no-param-reassign": "off",
        "formatjs/enforce-default-message": [
          "error",
          "literal"
        ],
        "formatjs/enforce-description": [
          "error",
          "literal"
        ],
        "formatjs/no-multiple-whitespaces": [
          1
        ],
        "formatjs/no-multiple-plurals": [
          "error"
        ],
        "formatjs/no-complex-selectors": [
          "error",
          {
            "limit": 4
          }
        ],
        "react/react-in-jsx-scope": 0,
        "react/prop-types": 0
      }
    },
    {
      "files": "*.json",
      "parser": "jsonc-eslint-parser",
      "rules": {}
    }
  ]
}